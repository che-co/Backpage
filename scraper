#!/bin/bash  
shopt -s extglob 
#  Author: Sergio "Checo" Gonzales
#  Date: 07-19-2016
#  This can be used to scrape the backpage.com
CATEGORY="$1,"
DATE=`date +%d-%m-%Y`
#  Test for valid params and necessary directories.
#  If directories do not exist, create them.

if [ -z "$1" ]; then
	echo "Error: Posting category or categories not given without defulat"
	echo "Usage: $0 [category,category,...] [geography] [geography] ..."
	exit 1
fi

if [ -z "$2" ]; then
	echo "Error: Geography or georgraphies not given without default"
	echo "Usage: $0 [category,category,...] [geography] [geography] ..."
	exit 1 
fi
if [ ! -d ./content ]; then
	mkdir ./content
fi
if [ ! -e ./content/posting_content_raw.csv -o -s ./content/posting_content_raw.csv ]; then
	echo BODY,AGE,LOCATION,DATETIME,ID,ADTYPE > ./content/posting_content_raw.csv
fi
#  Select geographies.. not sure how to implement this yet

#  Scrape topics
until [ -z "$2" ]; do
	SUPATH=./URLs/sponsored/"$2"
	NSUPATH=./URLs/non-sponsored/"$2"
	PPATH=./.pages/"$2"/
	NSCPATH=./content/non-sponsored/"$2"
	SCPATH=./content/sponsored/"$2"
#  Download URLS and check remove URLS previously downloaded
#  Still need to implement for subsequent pages
	for X in `eval echo {$CATEGORY}`; do
		PAGE=1
		FNAME="$2"_"$X"_"$DATE"

		if [ ! -d "$NSPATH"/"$X" ]; then
			mkdir -p "$NSPATH"/"$X"
		fi
		if [ ! -d "$SPATH"/"$X" ]; then
			mkdir -p "$SPATH"/"$X"
		fi
		if [ ! -d "$PPATH"/"$X" ]; then
			mkdir -p "$PPATH"/"$X"
		fi
		if [ ! -d "$NSCPATH"/"$X" ]; then
			mkdir -p "$NSCPATH"/"$X"
		fi
		if [ ! -d "$SCPATH"/"$X" ]; then
			mkdir -p "$SCPATH"/"$X"
		fi

		until [ "$PAGE" -gt 444 ]; do
			echo downloading URLs for "$2"/"$X"/page"$PAGE"
   
			curl -s ""$2".backpage.com/"$X"/&page="$PAGE"" > "$PPATH"/"$X"/"$FNAME"_pg"$PAGE".html
   #  Test to see if the posting pages has ended and there are "No more matches."
			grep -q  "<div><b>No matches found.</b><br><br></div>" "$PPATH"/"$X"/"$FNAME"_pg"$PAGE".html
			if [ $? -eq 0 ]; then
				echo No more posting at page: "$PAGE"
				break
			fi
   #  Find every posting and sponsord URLs on currnet page
			grep -v "sponsorBoxPlusImages" "$PPATH"/"$X"/"$FNAME"_pg"$PAGE".html | grep -o /"$X"/[a-z\-]*/[0-9]* | sort | uniq > "$NSPATH"/"$X"/."$FNAME"_NS.txt
			grep "sponsorBoxPlusImages" "$PPATH"/"$X"/"$FNAME"_pg"$PAGE".html | grep -o /"$X"/[a-z\-]*/[0-9]* | sort | uniq > "$SPATH"/"$X"/."$FNAME"_S.txt

     			if [ `ls -A -1 "$NSPATH"/"$X" | wc -l` -le 1 ]; then 
       				mv "$NSPATH"/"$X"/."$FNAME"_NS.txt "$NSPATH"/"$X"/"$FNAME"_NS.txt
     			else
       				sort -u "$NSPATH"/"$X"/."$FNAME"_NS.txt `ls -A -d  "$NSPATH"/"$X"/*` > "$NSPATH"/"$X"/"$FNAME"_NS.txt
       				rm "$NSPATH"/"$X"/."$FNAME"_NS.txt
     			fi
			if [ `ls -A -1 "$SPATH"/"$X" | wc -l` -le 1 ]; then
				mv "$SPATH"/"$X"/."$FNAME"_S.txt "$SPATH"/"$X"/"$FNAME"_S.txt
			else
				sort -u "$SPATH"/"$X"/."$FNAME"_S.txt `ls -A -d "$SPATH"/"$X"/*` > "$SPATH"/"$X"/"$FNAME"_S.txt
    				rm "$SPATH"/"$X"/."$FNAME"_S.txt
			fi
			
    			((PAGE+=1))
		done 
#  Download and organize content--I need to functionalize this!
		echo downloading/extracting non-sponsored content for "$2"/"$X"
		while read URL; do
			curl -s "http://"$2".backpage.com/"$URL"" > "$NSCPATH"/.ad.txt
			WRITEBODY=0
			
			#  Extract posting's body content
			while read LINE; do
				grep -q "</div>" <(echo "$LINE")
				if [ $? -eq 0 -a "$WRITEBODY" -eq 1 ]; then
					break
				fi
				if [ "$WRITEBODY" -eq 1 ]; then
					BODY="${BODY}""${LINE}"$'\n'
				fi
				grep -q "<div class=\"postingBody\">" <(echo "$LINE")
				if [ $? -eq 0 ]; then
					WRITEBODY=1
				fi
			done < "$NSCPATH"/.ad.txt
			BODY="${BODY//+([$'\n\r\t']|<br>)/ }"
			
			#  Extract date and time of posting
			DATETIME=`grep -o "[[:upper:]][[:lower:]]\+, [[:upper:]][[:lower:]]\+ [0-9]\+, [0-9]\{4\} [0-9]\+:[0-9]\{2\} [APM]*" "$NSCPATH"/.ad.txt`
			#  Extract "poster's" age
			AGE=`grep -oP "(?<=Poster's age: )[0-9]*" "$NSCPATH"/.ad.txt`
			
			#  Extract location information
			LOCATION=`grep -oP "(?<=Location:)\W*?.*\W*?(?=</div)" "$NSCPATH"/.ad.txt`
			
			#  Extract Post ID to other postings
			ID=`grep -oP '(?<=Post ID: )[0-9]*' "$NSCPATH"/.ad.txt`
			
			#  Extract "Other Ads by this user"
			OTHERADS=`grep -v "http://"$2".backpage.com/"$URL"" <(grep -o "http://[a-z]\+\./backpage\.com/"$X"/[a-z\-]\+/[0-9]\+" "$NSCPATH"/.ad.txt)`
			#  Write content to file and download images
			if [ ! -d "$NSCPATH"/"$ID" ]; then
				mkdir -p "$NSCPATH"/"$ID"/img
			fi
			NSIPATH="$NSCPATH"/"$ID"/imgs
			SIPATH="$SCPATH"/"$ID"/imgs
			
			echo "$BODY" > "$NSCPATH"/"$ID"/body.txt
			echo "$DATETIME" > "$NSCPATH"/"$ID"/datetime.txt
			echo "$AGE" > "$NSCPATH"/"$ID"/age.txt
			echo "$LOCATION" > "$NSCPATH"/"$ID"/location.txt
			if [ ! -z "$OTHERADS" ]; then
				echo "$OTHERADS" > "$NSCPATH"/"$ID"/otheradurls.txt
			fi

			IMGURL=`paste -sd, <(grep -Po '(?<=(img src="))[^ ]*(?=")' "$NSCPATH"/.ad.txt)`
			if [ ! -z "$IMGURL" ]; then
				cd "$NSIPATH"
				echo downloading images
				curl -O "{"$IMGURL"}"
				cd -
			fi

			#  Needs verification of success
			echo "\""$BODY"\","$AGE",\""$LOCATION"\",\""$DATETIME"\","$ID",0" >> ./content/posting_content_raw.csv
			BODY=;DATETIME=;AGE=;LOCATION=;ID=;OTHERADS=;IMGURL=;
		done < "$NSPATH"/"$X"/"$FNAME"_NS.txt
	done
	shift
done

exit $?
